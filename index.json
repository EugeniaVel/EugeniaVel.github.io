[{"authors":null,"categories":null,"content":"Eugenia Velikodneva is a student of Applied Informatics in Peoples‚Äô Friendship University of Russia. She is interested in the use of mathematical models. Besides her speciality, she also studies French language.\n  Download my resum√©.\n","date":1654214400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1654214400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Eugenia Velikodneva is a student of Applied Informatics in Peoples‚Äô Friendship University of Russia. She is interested in the use of mathematical models. Besides her speciality, she also studies French language.","tags":null,"title":"Eugenia Velikodneva","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy‚Äôs Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://EugeniaVel.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Eugenia Velikodneva","Âê≥ÊÅ©ÈÅî"],"categories":["Demo","ÊïôÁ®ã"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It‚Äôs a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  üëâ Create a new site üìö Personalize your site üí¨ Chat with the Wowchemy community or Hugo community üê¶ Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy üí° Request a feature or report a bug for Wowchemy ‚¨ÜÔ∏è Updating Wowchemy? View the Update Tutorial and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n‚ù§Ô∏è Click here to become a sponsor and help support Wowchemy‚Äôs future ‚ù§Ô∏è As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features ü¶Ñ‚ú®\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you‚Äôll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, ‰∏≠Êñá, and Portugu√™s Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1654214400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654214400,"objectID":"58fa12ef54337c0cc9b633b4c9a84e81","permalink":"https://EugeniaVel.github.io/post/c++/","publishdate":"2022-06-03T00:00:00Z","relpermalink":"/post/c++/","section":"post","summary":"In this post, we will consider the features of this language, its difference from other programming languages.","tags":["Academic","ÂºÄÊ∫ê"],"title":"C++","type":"post"},{"authors":["Eugenia Velikodneva","Âê≥ÊÅ©ÈÅî"],"categories":["Demo","ÊïôÁ®ã"],"content":"Lab #11 In Lab 11, we learned the basics of UNIX shell programming and how to write more complex batch files using logical control constructs and loops. In total, we wrote 4 batch files: one for searching the text from the template in the file; the second is to determine whether a positive, negative, or zero number has been entered into a C program; the third for creating or deleting the number of files specified as an argument with a given name; the fourth to archive all files in the specified directory (which was then modified to archive only those files that were changed during the last week).\nLab #12 In this lab, we continued to learn the basics of UNIX shell programming and learn how to write more complex batch files. In this lab, we wrote only three batch files: the first one implemented a simplified semaphore mechanism, the second one was the implementation of the man command using the /usr/share/man/man1 directory, the third generated a random sequence of Latin letters using the $RANDOM built-in variable. In addition, in both laboratories we answered control questions on the topic.\n5 stage of the individual project At the fifth stage, we added projects to the site, made a post on the past week, as well as a post on the topic of scientific programming languages.\nIn general, this week was just as productive as the previous one.\n","date":1654214400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654214400,"objectID":"bc4886a55151538f96dd022452bfd117","permalink":"https://EugeniaVel.github.io/post/23-29/","publishdate":"2022-06-03T00:00:00Z","relpermalink":"/post/23-29/","section":"post","summary":"Last week, as in the previous two, we did two laboratory works (this time 11 and 12), as well as one stage of an individual project (fifth).","tags":["Academic","ÂºÄÊ∫ê"],"title":"Last week's post(23.05-29.05)","type":"post"},{"authors":null,"categories":null,"content":"Objective Learn the basics of UNIX shell programming. Learn to write more complex batch files using logical control structures and loops.\nPerforming the lab  Created three files: a.txt (Fig. 1) for reading text from it, b.txt (Fig. 2) as a template, and bb for writing the results of the program to it. I created the file l11n1 and added the right to execute. (Fig. 3) I wrote a code for a batch file that will analyze a line with the keys -i, -o, -p, -C, -n, where i is a file for reading data from it , o - output file, p - search pattern, C - option to distinguish between uppercase and lowercase letters, n - line count option. (Fig. 4) I checked the file:   Without options -C and -n. (Fig. 5) Without the -n option, but with the -C option. (Fig. 6) With all options. (Fig. 7) Without the -C option, but with the -n option. (Fig. 8) Without specifying a template. (Fig. 9) Without specifying a file for reading. (Fig. 10) Without specifying a file for recording. (Fig. 11)                                    Created the file l11n2 and added the right to execute. (Fig. 12) Wrote a C program that enters a number, determines whether it is greater than zero, less than or equal, and using exit(n) upon completion, transmits information about the exit code into the shell. (Fig. 13) Compiled the program with gcc. (Fig. 14) Wrote a batch file that calls the file created in C using $? analyzes the exit code of the previous program and displays information about what number was entered. (Fig. 15) I checked the program on three numbers, one of which is less than zero, the other is greater and the third is equal to zero. (Fig. 16)                   I created the file l11n3 and added the right to execute. (Fig. 17) I wrote a batch file that creates or deletes the specified number of files with the specified name. (Fig. 18) I checked the operation of the file with the -m option - creating files (Fig. 19), -r - delete files (fig.20) , -t - wrong option.(fig.21)                 Created the file l11n3 and added the right to execute. (Fig. 22) Wrote a batch file that archives all files in the specified folder. (Fig. 23) Checked the program on the directory n4. (Fig. 24-25) Modified the file so that it archived only those files that were changed within the last seven days. (Fig. 26) I checked the operation of the file in the blog directory.                       ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"314ad3c97f4d5b004a2e4cab37cdbf59","permalink":"https://EugeniaVel.github.io/project/lab11/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab11/","section":"project","summary":"Learn the basics of UNIX shell programming. Learning to write more complex batch files using logical control structures and loops.","tags":null,"title":"Lab","type":"project"},{"authors":null,"categories":null,"content":"–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã Acquisition of practical skills of user interaction with the system through the command line.\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã  Use the cd command to change to your home directory. Using the pwd command, I found out the full name of the directory in which I am.     2.1. Changed to the /tmp directory using the cd command.\n   2.2 Using the ls command without options, displayed the contents of the /tmp directory. The -a option allows you to see absolutely the entire contents of the directory, even hidden files. The -l option displays detailed information about files and directories. The -F option displays a pointer to how the file or directory is started. Accordingly, when using all three options, you can immediately see all directories and files with detailed information about them and the specified file type.\n         2.3 Using the cd command, I moved to the /var/spool directory, looked at its contents using ls, and did not find the cron subdirectory among the directories.\n   2.4 Using the cd command, I went to the home directory, using the ls command without options, I looked at the contents of the home directory, and using the -l option, I looked at who owns the files and subdirectories (evvelikodneva)\n   3.1. Using the mkdir command, I created a newdir subdirectory in my home directory.\n   3.2. Changed to the newdir directory and created a morefun subdirectory using the mkdir command.\n   3.3. Using the command cd ~ moved to the home directory. In it, using the mkdir command, I created three directories letters, memos and misk at once. Checked their creation using the ls command. Then, using the rm -r command, I deleted three directories at once (letters, memos and misk) and checked their removal using the ls command.\n   3.4. I tried to remove the newdir directory using the rmdir command, but it failed because the directory was not empty.\n   3.5. Deleted the ~/newdir/morefun directory, verified its removal with the ls command. The morefun directory has been successfully removed from the newdir directory.\n   Using the man ls command, I looked at the list of options and their descriptions, then found the -R option, which displays the contents of not only the specified directory, but also its subdirectories. I checked how this option works.        Using the man ls command, I looked at the list of options and their descriptions, then found the -t option, which sorts the output list by last modified time, and the -l option, which displays a detailed description of the files. (Fig.15-16) Checked how these options work.           Used the man command to list the options for the following commands:  cd\n-P - allows you to follow symbolic links before all ‚Äú..‚Äù jumps are processed;\n-L - follows symbolic links only after ‚Äú..‚Äù have been processed;\n-e - if the folder to which you want to go could not be found, it gives an error.\npwd\n-L, ‚Äìlogical - take a directory from the environment variable, even if it contains symbolic links;\n-P - drop all symlinks\nmkdir\n-m (‚Äìmode=mode) - assign access mode (rights). Mod defaults to 0777, which provides unlimited rights.\n-p (‚Äìparents) - do not show errors, and also ignore them.\n-z (‚Äìcontext=CTX ) accepts the SELinux context for the default directory.\n-v (‚Äìverbose) print a message about each new directory.\nrmdir\n-p Allows you to remove the directory and the directories above that are empty. A message is displayed on standard output about deleting all the directories specified in the route or about saving some of them for some reason.\n-s Suppresses the message emitted by the -p option.\nrm\n-f The command does not issue messages when the file being deleted does not exist, does not ask for confirmation when deleting files that do not have write permissions. If there is no write access to the directory, the files are not deleted. The only error message is when you try to delete a directory that you don‚Äôt have permission to write to (see the -r option).\n-r Recursively removes all directories and subdirectories specified in the argument list. The directories are first emptied, then removed. Confirmation when deleting files that do not have write permissions is not prompted if the -f option is given, or standard input is not assigned to a terminal and the -i option is not given. When deleting non-empty directories, the rm -r command is preferred over the rmdir command, as the latter can only delete an empty directory. But rm -r can be quite a thrill if you mistype a directory!\n-i Ask for confirmation before deleting each file. The -i option overrides the effect of the -f option; it is valid even when standard input is not assigned to the terminal.\n               mkdir (added -v (option that displays a description of the commands done))\nrm -r (added -v)\nrmdir (added -p (an option that allows you to remove directories with their contents) and -v)\n   ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"9dda109f1ed2d3ee847a569747ca67b6","permalink":"https://EugeniaVel.github.io/project/lab4/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab4/","section":"project","summary":"–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.","tags":["Deep Learning"],"title":"Lab","type":"project"},{"authors":null,"categories":null,"content":"Performing the lab  Using the login command, logged into the system using the appropriate username.     Using the ls and grep commands and their options, as well as the output stream (\u0026gt;,¬ª), write the names of the files contained in the /etc directory to file.txt and then append the names of the files contained in the home directory to the same file .     Using the cat and grep commands, I first displayed the names of all files in file.txt that have the .conf extension, and then wrote them into a new text file called conf.txt using the output stream.        Using the find command and its options, found all files starting with the character c that are contained in the home directory.     Using the find, less commands, their options and the pipeline, I paged out the names of files from the /etc directory, starting with the character h. (Fig. 6-7)        Using the find command, streaming output, and \u0026amp;, started a process in the background that writes files that begin with log to ~/logfile.     Using the rm command, deleted the ~/logfile file.     Using the \u0026amp; sign, launched the gedit editor from the console in the background.     Using the ps aux command, the grep filter, and the pipeline, determined the process ID of gedit. In addition, the process ID is specified when it is started in the background.     Read the help (man) of the kill command. Used the kill % command with PID to end the gedit process.        The df command shows the size of each mounted disk partition. The du command shows the number of kilobytes used by each file or directory.           Using the find command and its maxdepth and type options, I displayed the names of all directories, I have located in the home directory.                    Conclusions I got acquainted with the tools for searching files and filtering text data. Acquired practical skills: in process (and task) management, in checking disk usage and maintaining file systems.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"7cbb474e0030faff67e24c684a37421e","permalink":"https://EugeniaVel.github.io/project/lab6/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab6/","section":"project","summary":"Familiarization with the tools for searching files and filtering text data. Acquisition of practical skills in managing processes (and jobs), checking disk usage and maintaining file systems.","tags":["Deep Learning"],"title":"Lab ‚Ññ6","type":"project"},{"authors":null,"categories":null,"content":"Objective Get to know the Linux operating system. Get hands-on experience with the vi editor installed by default in almost all distributions.\nPerforming the lab Exercise 1  Using the mkdir command, I created the ~/work/os/lab06 directory. (Fig. 1)     Using the cd command, I moved to the directory created in the first paragraph. (Fig. 2)     Called vi and created a new file hello.sh. (Figure 3-4)        Pressed the i key to switch to the input mode (INSERT) and entered the text proposed in the task. (Fig. 5)     Pressed the esc key to enter command mode. At the bottom there is now no word INSERT. (Fig. 6)     Pressed colon to switch to last line mode. At the bottom, an invitation appeared in the form of a colon. (Fig. 7)     Entered wq to save the file and exit. (Fig. 8)     Using the chmod command, I made the file executable (added the right to execute the file). (Fig. 9)     Task 2  Called vi to edit the file hello.sh. (Fig. 10)     Set the cursor at the end of the word HELL in the second line. (Fig. 11)     By pressing the i key, I switched to insert mode and replaced the word HELL with HELLO. I pressed the esc key to switch to command mode. (Fig. 12)     Set the cursor on the 4th line (Fig. 13) By pressing the dw keys, delete the word LOCAL. (Fig. 14)        By clicking on the letter i, I switched to insert mode and typed the word local. (Fig. 15) I pressed the esc key to switch to command mode.     I set the cursor on the last line. (Fig. 16) After it I inserted the line ‚Äúecho $ HELLO‚Äù. (Fig. 17)         Pressed the esc key to enter command mode.\n  Pressing the d key twice, deleted the last line. (Fig. 18)\n     Pressed the u key to cancel the changes. (Fig. 19)     Typed the character : to switch to last line mode, then typed w to save changes and q to quit vi.  Conclusions Familiar with the Linux operating system. Gained practical skills in working with the vi editor installed by default in almost all distributions.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"000e20314bc20bef635ff513cb37579e","permalink":"https://EugeniaVel.github.io/project/lab8/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab8/","section":"project","summary":"Get to know the Linux operating system. Get hands-on experience with the vi editor installed by default in almost all distributions.","tags":null,"title":"Lab ‚Ññ8","type":"project"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Last week we completed labs #9 and #10. In the ninth laboratory work, we got acquainted with the Emacs editor. We learned the main combinations of hot keys, tried to test their work. We created files, opened them, edited them, moved between buffers, analyzed the concept of a frame, the basics of working with it. Now this is one of my favorite editors, it is very convenient to work in it. It has a lot of advantages, but there are also some disadvantages, one of which is the complexity of its configuration.\nIn the tenth laboratory work, we got acquainted with the concept of a batch file, with various types of command shells. We analyzed the principles of writing batch files, tried to write several such files ourselves. Now I will write a little about the types of shells used in OS such as UNIX/Linux. On operating systems such as UNIX/Linux, the most commonly used the following shell implementations:\n‚Äì Bourne shell (sh) ‚Äî standard UNIX/Linux command shell, containing a basic, but at the same time a complete set of functions;\n  C-shell (or csh) - an add-on to the Bourne shell that uses a C-like command syntax with the ability to save the history of command execution;\n  the Korn shell (or ksh) - resembles the C shell, but the program control statements mine is compatible with Bourne shell operators;\n  BASH - short for Bourne Again Shell, basically the same moves properties of the C and Korn shells (developed by the Free Software Foundation).\n  In addition, we made the fourth stage of the project, in which we registered on some scientific and bibliometric resources and attached links to them on the site. In addition, we made a post last week on a topic of your choice. I decided to make a post on the topic ‚ÄúFormation of the report‚Äù.\nIn general, the week was productive, I learned a lot of new information that will help me in my future life.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"180cbc6340aea2d9b82d77fdd6472b0e","permalink":"https://EugeniaVel.github.io/post/16-22/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/16-22/","section":"post","summary":"Last week we completed labs #9 and #10. In the ninth laboratory work, we got acquainted with the Emacs editor. We learned the main combinations of hot keys, tried to test their work.","tags":["Academic"],"title":"Post last week 16.05-22.05","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"In a broad sense, a scientific programming language is a programming language that is widely used in computational science and computational mathematics. Such languages ‚Äã‚Äãare characterized by the presence of libraries in which there are a large number of mathematical functions, as well as specialized syntax. They are very well suited for solving many mathematical problems, these languages ‚Äã‚Äãare optimized for using various formulas and matrices.\nMany programming languages ‚Äã‚Äãdo not have built-in formulas necessary for complex calculations, however, in Python and C++, for example, these functions are available in the standard libraries, so these languages ‚Äã‚Äãcan be used for scientific purposes.\nHere are some examples of languages ‚Äã‚Äãthat are considered scientific programming languages.\n The International Algebraic Language (IAL), renamed ALGOL 58 , had a great influence and was generally considered the ancestor of most modern programming languages ‚Äã‚Äã(the so-called languages ‚Äã‚Äãlike ALGOL). In addition, ALGOL object code was a simple, compact, and stack-based instruction set architecture commonly used in learning to build compilers and other high-order languages; of which Algol is usually considered the first. APL (named after the book The Programming Language) is a programming language developed in the 1960s by Kenneth E. Iverson. Its central data type is a multidimensional array. It uses a large set of special graphic symbols to represent most functions and operators, resulting in very concise code. It was an important influence on the development of concept modeling, spreadsheets, functional programming, and computer math packages. Fortran is a general-purpose, compiled mandatory programming language that is particularly suitable for numerical calculations and scientific computing. Originally developed by IBM in the 1950s for scientific and engineering applications, FORTRAN went on to become dominant in scientific computing. It has been used for over six decades in computationally intensive fields such as numerical weather prediction, finite element analysis, computational fluid dynamics, geophysics, computational physics, crystallography, and computational chemistry. It is a popular language for high performance computing and is used for programs that rate and rate the world‚Äôs fastest supercomputers. J is a very concise array programming language, which is most suitable for mathematical and statistical programming, especially when performing operations on matrices. It has also been used in extreme programming and network performance analysis. Maple is a symbolic and numeric computing environment and a multi-paradigm programming language. It covers several areas of technical computing such as symbolic mathematics, numerical analysis, data processing, visualization, and others. The MapleSim toolkit adds functionality for multi-domain physics simulation and code generation. MATLAB (short for ‚Äúmatrix laboratory‚Äù) is a proprietary multi-paradigm programming language and computing environment developed by MathWorks. MATLAB allows you to manipulate matrices, plot functions and data, implement algorithms, create user interfaces, and interact with programs written in other languages. R is a programming language and free software environment for statistical computing and graphics maintained by the R Foundation for Statistical Computing. The R language is widely used by statisticians and data scientists for the development of statistical software and data analysis.  ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"8dae6e0634a1e0f2fc8a3542de44fd59","permalink":"https://EugeniaVel.github.io/post/yaziki_program/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/yaziki_program/","section":"post","summary":"In a broad sense, a scientific programming language is a programming language that is widely used in computational science and computational mathematics. Such languages ‚Äã‚Äãare characterized by the presence of libraries in which there are a large number of mathematical functions, as well as specialized syntax.","tags":["Academic"],"title":"Scientific programming languages","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"So, the structure of the report on laboratory work on Operating Systems includes:\n title page formulation of the purpose of the work description of results conclusions answers to security questions Let‚Äôs consider some points in more detail. The information on the title page should include: indication of the number of laboratory work Name of the student who completed the laboratory work This page is drawn up using a template, so at this stage it is difficult to make a mistake, the main thing is not to forget about this item (as well as about others), so you should always keep the structure of the report in front of your eyes when designing it. The next item is statement of the purpose of the work. Usually the purpose of the work is present in the description of the tasks, so this item is also quite simple to complete. Description of the results - the main part of the work, here you need to describe in detail your actions when performing the laboratory. Components of this section: screenshots of the laboratory work. When doing work, I personally try to make sure that there are a lot of screenshots (so that they explain the work process). I also make sure that they are of good quality and that they do not contain any unnecessary information. listings (source code of programs), if any. So far, we haven‚Äôt had any labs with source code, we‚Äôve done tasks on the command line or in built-in editors. results of program execution (text or screenshot depending on the task). In addition to these points, it is necessary to describe the performance of the work in the form of text, to tell in sufficient detail about which commands were used and what result they gave. The section conclusions is intended for the student to tell what he learned during the laboratory work. Usually the conclusions coincide with the purpose of the work. In the section answers to control questions the student answers the questions contained at the end of the description of the laboratory work. They are needed in order to repeat the material covered, to recall the theoretical foundations. We prepare lab reports using Markdown. It is a handy tool with clear syntax. At the beginning of the file, the fonts and design theme used in the file are indicated, then the entire text of the report is written, which, thanks to the use of Markdown, can be very easily converted into any convenient format, I convert OS reports to pdf and docx files. That‚Äôs all, I hope there are no questions about the design of the reports!  ","date":1653004800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653004800,"objectID":"688f5d96aa336d6e14ba5e0735a03403","permalink":"https://EugeniaVel.github.io/post/report-post/","publishdate":"2022-05-20T00:00:00Z","relpermalink":"/post/report-post/","section":"post","summary":"When performing laboratory work on the OS, one of the tasks is to prepare a report on laboratory work. In this post I will talk about the structure of the report, the means for its design.","tags":["Academic"],"title":"Report design","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Last week we completed two laboratory works - ‚Ññ7,8, and also made out the third stage of an individual project. Now I will tell you what I learned and what work was done. In Lab 7 we learned how to work with the Midnight Commander shell. The command shell is an interface for user interaction with the operating system and software through commands. Midnight Commander (or mc) is a pseudo-graphical command shell for UNIX/Linux systems. We looked at the commands of each panel in mc, found out why they are needed, and also learned how to use hotkeys.\nIn addition, we worked with the built-in editor in mc, which can be launched using the mc -e or mcedit command, specifying the name of the file to be edited after it. In lab #8 we worked with vi (Visual display editor). It can be used to edit text files. We worked in all three vi modes - command mode, insert mode, and last line mode.\nDuring the third stage of an individual project, we added information about achievements, skills and experience to the site, as well as two posts: one for the past week, the second on a topic of your choice:\n Lightweight markup languages. Markup languages. LaTeX. Markdown language. I chose the Markdown markup language, described the main features of its syntax.  ","date":1653004800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653004800,"objectID":"3afe2413fff63983c16ed3ef1ccffaef","permalink":"https://EugeniaVel.github.io/post/9.05-15.05/","publishdate":"2022-05-20T00:00:00Z","relpermalink":"/post/9.05-15.05/","section":"post","summary":"Last week we completed two laboratory works - ‚Ññ7,8, and also made out the third stage of an individual project. Now I will tell you what I learned and what work was done.","tags":["Academic"],"title":"–ü–æ—Å—Ç –ø–æ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ(9.05.22-15.05.22)","type":"post"},{"authors":null,"categories":null,"content":"Theoretical introduction Midnight Commander (or mc) - pseudo-graphical command shell for UNIX/Linux systems.\nAbove the panels is a menu that can be accessed using F9 keys. Under the panels at the bottom there are on-screen control buttons, associated with function keys F1 to F10. Above them is command line for entering commands.\nThe panel in mc displays a list of files in the current directory. The absolute path to this directory is displayed in the header of the panel. The active panel has a title and one of its lines are highlighted. Panels are controlled using certain keyboard shortcuts or menu items mc.\nYou can go to the mc panels menu bar using the F9 function key. The menu bar has five menus: Left Panel , File , Command , Options and Right Panel.\nPerforming the lab  Learned information about Midnight Commander by calling man mc on the command line.     Launched mc from the command line, studied its structure and menu.       b)Using a combination of shift keys and up and down arrows, I selected the ~/work/study directory in the right pane, then, using the same combination, deselected the directory.\nc) Using the f5 key, I copied the Student.cpp file from the ~/work/study/2021-2022/Operating systems directory to the ~/work directory.\nd) Using the f6 key, I moved the Student.cpp file from the ~/work directory to the home directory.\ne) Using the combination of shift and space keys, I looked at the size of the home directory.\nExecuted the commands:  a) Quick view. With its help, I displayed the contents of the Student.cpp file from the home directory on the left panel.\n   b) Information. With its help, I displayed information about one of the screenshots on the screen.\nc) Directory tree. With its help, I looked at the contents of the home directory in the form of a directory tree.\n   d) List format. With its help, I changed the format of the output list of files and directories to a shortened one.\n   e) Sorting order. With its help, I changed the sort order of files and directories in the home directory.\n   f) Filter. With its help, I displayed files from the home directory only with the .cpp extension.\nUsing the capabilities of the file submenu, performed the following operations:  -Viewed the contents of the Student.cpp file using the View File command.\n   -Edited the Student.cpp file using the edit command without saving the changes.\n   -Created the ~/lab7 directory using the create directory command.\n   -Using the copy command, I copied the two screenshots I selected to the ~/lab7 directory I created in the last paragraph.\n   Using the possibilities of the submenu, the command performed the following operations:  -Recursively found all files with the .txt extension using the command search for a file in the home directory.\n-With the help of the history command, I looked at the history of commands, but did not receive the output of any command, so I could not complete the task to the end.\n-With the help of the quick access directories command, where I previously added the home directory, I moved to it.\n   -Using the command to edit the menu file, I looked at the contents of the menu file. The command allows you to edit the user‚Äôs context menu called by the F2 key. Using the edit extension file command, I looked at the contents of the extension file. The command allows you to set, using a specific syntax, actions when starting files with a specific extension.\n      Called up the settings submenu. In the panel settings, I found the command to show hidden files. and other commands that define the structure of the mc screen. (For example, changing the theme of mc)     Task for the built-in mc editor   Using the touch command, I created a text.txt file in my home directory.\n  Opened the file in the editor using the mc -e command (you can also use the mcedit command).\n      Inserted the text of the template for laboratory work into the file.\n   4.1. Using the key combination ctrl-y deleted the first line in the text of the file.\n4.2. Using the f3 key, I selected a fragment of the text of the file (one paragraph) and, using the f5 key, copied it to the first line.\n4.3. Using the f3 key, I selected a fragment of the text of the file (one paragraph) and, using the f6 key, moved it to the next line after the second paragraph.\n4.4. Using the f2 key, save the changes to the file.\n4.5. Using the key combination ctrl-u canceled the paragraph move made in subsection 4.3.\n4.6. Using the key combination ctrl-end moved to the end of the file and entered her full name.\n4.7. Using the key combination ctrl-home moved to the beginning of the file and entered the name of her group.\n4.8. Saved the file with the f2 key and closed the file with the f10 key.\n Opened the Student.cpp file in C++.\n  Using the editor menu (command submenu), turned off the syntax highlighting, since it was originally on.\n        ","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486400,"objectID":"e5ca20668dd84965c4c59a1e1ee772cb","permalink":"https://EugeniaVel.github.io/project/lab7/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/project/lab7/","section":"project","summary":"Mastering the basic features of the command shell Midnight Commander. Acquisition of practical skills for viewing directories and files; manipulation with them.","tags":null,"title":"Lab ‚Ññ7","type":"project"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Laboratory work ‚Ññ5  I studied Linux file systems, their structures, names and content of their directories. I learned how to use commands for working with files and directories, how to manage processes and how to check disk usage.  Report about laboratory work ‚Ññ5 I created the lab5 directory, copied the report and presentation templates into it. (Fig. 1)     { #fig:001 width=70% }\n In the first part of the description of the laboratory work, the following commands were given:  1.1. touch - creates a new file. I created a lab5.txt file, wrote numbers from 1 to 40 into it, so that when the following commands are executed, they are displayed on the screen. (Fig. 2, 3)\n1.2. cat - allows you to view small files. I displayed the contents of the file created by the previous command. (Fig. 2)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n1.3. less - used to view files page by page. I looked at the contents of the file I created in the first paragraph. (Fig.5,6)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n1.4. head - displays the first 10 lines of the file on the screen by default, using the -n option, you can set the number of output lines. Displayed the first 15 lines of the file lab5.txt. (Fig. 6)\n   { #fig:001 width=70% }\n1.5. tail - Prints the last 10 lines of a file by default. The -n option can be used to set the number of lines to be output. Displayed the last 15 lines of the lab5.txt file. (Fig. 7)\n   { #fig:001 width=70% }\n     { #fig:001 width=70% }\n2.2. Using the mkdir command, I created the ~/ski.plases directory in my home directory. I checked its creation using the ls command (displaying the contents of the directory) (Fig. 9)\n![9.Create the ~/ski.plases directory, check if it is in it] (image/oc9.jpg){ #fig:001 width=70% }\n2.3. Using the mv command, I moved the equipment file to the ~/ski.plases directory. I checked the location of the file in the ~/ski.plases directory.(Fig. 10)\n   { #fig:001 width=70% }\n2.4. Renamed the ~/ski.plases/equipment file to ~/ski.plases/equiplist using the cp command. I checked the change of his name. (Fig. 11)\n   { #fig:001 width=70% }\n2.5. Using the touch command, I created the file abc1 in my home directory. Using the cp command, I copied it to the ~/ski.plases directory, giving the new name equiplist2. I checked each action with the ls command. (Fig. 12)\n   { #fig:001 width=70% }\n2.6. Created a directory called equipment in the ~/ski.plases directory using the mkdir command. Checking its location in the catalog. (Fig. 13)\n   { #fig:001 width=70% }\n2.7. Using the mv command, I moved the files ~/ski.plases/equiplist and equiplist2 to the directory ~/ski.places/equipment. I checked their absence in the ~/ski.plases directory and their presence in the ~/ski.plases/equipment directory. (Fig. 14)\n   { #fig:001 width=70% }\n2.8. Created a directory called ~/newdir with the mkdir command and moved it to the ~/ski.plases directory with the new name plans using the cp command. I checked the execution of both commands. (Fig. 15)\n   { #fig:001 width=70% }\n     { #fig:001 width=70% }\n   { #fig:001 width=70% }\n3.2. Created a new directory called play. Using the chmod command and the octal notation gave the directory the following rights: drwx‚Äìx‚Äìx(711) (Fig.18). I checked the addition of these rights using the ls -l command. (Fig. 19)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n3.3. Created a new file named my_os. With the help of the chmod command, using the octal notation, I transferred the following rights to the file: -r-xr‚Äìr‚Äì(544) (Fig. 20). I checked the addition of these rights using the ls -l command. (Fig. 21)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n3.4. Created a new file called feathers. With the help of the chmod command, using the octal notation, I transferred the following rights to the file: -rw-rw-r‚Äì(644) (Fig. 22). I checked the addition of these rights using the ls -l command. (Fig. 23)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n  4.1. Using the cat command, I looked at the contents of the /etc/passwd file. (Fig. 24-25)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n4.2. Using the cp command, I copied the ~/feathers file to the ~/file.old file. (Fig. 26)\n   { #fig:001 width=70% }\n4.3. Using the mv command, I moved the ~/file.old file to the ~/play directory. (Fig. 27)\n   { #fig:001 width=70% }\n4.4. Using the cp command, I copied the ~/play directory to the ~/fun directory. The -r option means a recursive copy, i.e. a complete copy of a directory. I checked the appearance of a new directory with the ls command. (Fig. 28)\n   { #fig:001 width=70% }\n4.5. Using the mv command, I moved the ~/fun directory to the ~/play directory and immediately gave it the new name games. I checked its absence in the home directory and its presence in the ~/play directory with the ls command. (Fig. 29)\n   { #fig:001 width=70% }\n4.6. Using the command chmod u-r(u - owner, - - take away rights, r - read) deprived the owner of the ~/feathers ‚Ä¶","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589414400,"objectID":"fc74cff2d25450d3513cde477c69a2df","permalink":"https://EugeniaVel.github.io/post/last-week-post/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/post/last-week-post/","section":"post","summary":"During the last week I've done 2 laboratory works. I am going to show you, what I have done.","tags":["Academic"],"title":"Last week post üëã","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Markdown is a lightweight markup language designed to mark formatting in plain text while maintaining human readability as much as possible, and suitable for machine conversion into advanced publishing languages ‚Äã‚Äã(HTML, Rich Text, and others).\nBasic aspects of the syntax:\n  Paragraphs are created using an empty line. If there are empty lines around the text above and below, then the text turns into a paragraph. To make a line break instead of a paragraph, you need to put two spaces at the end of the previous line.\n  Headings are marked with a sharp # at the beginning of the line, from one to six.\n  To mark up unordered lists, you can use either *, or -, or + Nested items are created by four spaces before the item marker:\n   element 1 element 2  nested element 2.1 nested element 2.2   element ‚Ä¶   Pictures are inserted using the following scheme ‚Äú   ‚Äù, where you can add a caption to the picture in square brackets  ","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"3ddcbf31bd0daec9e0bdd991331c04df","permalink":"https://EugeniaVel.github.io/post/markdown-post/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/markdown-post/","section":"post","summary":"We will understand what it is and why it is needed, and also see the main aspects of its syntax.","tags":["Academic"],"title":"Markdown","type":"post"},{"authors":["Eugenia Velikodneva","Âê≥ÊÅ©ÈÅî"],"categories":["Demo","ÊïôÁ®ã"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It‚Äôs a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  üëâ Create a new site üìö Personalize your site üí¨ Chat with the Wowchemy community or Hugo community üê¶ Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy üí° Request a feature or report a bug for Wowchemy ‚¨ÜÔ∏è Updating Wowchemy? View the Update Tutorial and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n‚ù§Ô∏è Click here to become a sponsor and help support Wowchemy‚Äôs future ‚ù§Ô∏è As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features ü¶Ñ‚ú®\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you‚Äôll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, ‰∏≠Êñá, and Portugu√™s Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://EugeniaVel.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome üëã We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","ÂºÄÊ∫ê"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let‚Äôs make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://EugeniaVel.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://EugeniaVel.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":["Eugenia Velikodneva","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://EugeniaVel.github.io/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]