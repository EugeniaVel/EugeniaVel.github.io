[{"authors":null,"categories":null,"content":"Eugenia Velikodneva is a student of Applied Informatics in Peoples’ Friendship University of Russia. She is interested in the use of mathematical models. Besides her speciality, she also studies French language.\n  Download my resumé.\n","date":1653609600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653609600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Eugenia Velikodneva is a student of Applied Informatics in Peoples’ Friendship University of Russia. She is interested in the use of mathematical models. Besides her speciality, she also studies French language.","tags":null,"title":"Eugenia Velikodneva","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://EugeniaVel.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Last week we completed labs #9 and #10. In the ninth laboratory work, we got acquainted with the Emacs editor. We learned the main combinations of hot keys, tried to test their work. We created files, opened them, edited them, moved between buffers, analyzed the concept of a frame, the basics of working with it. Now this is one of my favorite editors, it is very convenient to work in it. It has a lot of advantages, but there are also some disadvantages, one of which is the complexity of its configuration.\nIn the tenth laboratory work, we got acquainted with the concept of a batch file, with various types of command shells. We analyzed the principles of writing batch files, tried to write several such files ourselves. Now I will write a little about the types of shells used in OS such as UNIX/Linux. On operating systems such as UNIX/Linux, the most commonly used the following shell implementations:\n– Bourne shell (sh) — standard UNIX/Linux command shell, containing a basic, but at the same time a complete set of functions;\n  C-shell (or csh) - an add-on to the Bourne shell that uses a C-like command syntax with the ability to save the history of command execution;\n  the Korn shell (or ksh) - resembles the C shell, but the program control statements mine is compatible with Bourne shell operators;\n  BASH - short for Bourne Again Shell, basically the same moves properties of the C and Korn shells (developed by the Free Software Foundation).\n  In addition, we made the fourth stage of the project, in which we registered on some scientific and bibliometric resources and attached links to them on the site. In addition, we made a post last week on a topic of your choice. I decided to make a post on the topic “Formation of the report”.\nIn general, the week was productive, I learned a lot of new information that will help me in my future life.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"180cbc6340aea2d9b82d77fdd6472b0e","permalink":"https://EugeniaVel.github.io/post/16-22/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/16-22/","section":"post","summary":"Last week we completed labs #9 and #10. In the ninth laboratory work, we got acquainted with the Emacs editor. We learned the main combinations of hot keys, tried to test their work.","tags":["Academic"],"title":"Post last week 16.05-22.05","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"In a broad sense, a scientific programming language is a programming language that is widely used in computational science and computational mathematics. Such languages ​​are characterized by the presence of libraries in which there are a large number of mathematical functions, as well as specialized syntax. They are very well suited for solving many mathematical problems, these languages ​​are optimized for using various formulas and matrices.\nMany programming languages ​​do not have built-in formulas necessary for complex calculations, however, in Python and C++, for example, these functions are available in the standard libraries, so these languages ​​can be used for scientific purposes.\nHere are some examples of languages ​​that are considered scientific programming languages.\n The International Algebraic Language (IAL), renamed ALGOL 58 , had a great influence and was generally considered the ancestor of most modern programming languages ​​(the so-called languages ​​like ALGOL). In addition, ALGOL object code was a simple, compact, and stack-based instruction set architecture commonly used in learning to build compilers and other high-order languages; of which Algol is usually considered the first. APL (named after the book The Programming Language) is a programming language developed in the 1960s by Kenneth E. Iverson. Its central data type is a multidimensional array. It uses a large set of special graphic symbols to represent most functions and operators, resulting in very concise code. It was an important influence on the development of concept modeling, spreadsheets, functional programming, and computer math packages. Fortran is a general-purpose, compiled mandatory programming language that is particularly suitable for numerical calculations and scientific computing. Originally developed by IBM in the 1950s for scientific and engineering applications, FORTRAN went on to become dominant in scientific computing. It has been used for over six decades in computationally intensive fields such as numerical weather prediction, finite element analysis, computational fluid dynamics, geophysics, computational physics, crystallography, and computational chemistry. It is a popular language for high performance computing and is used for programs that rate and rate the world’s fastest supercomputers. J is a very concise array programming language, which is most suitable for mathematical and statistical programming, especially when performing operations on matrices. It has also been used in extreme programming and network performance analysis. Maple is a symbolic and numeric computing environment and a multi-paradigm programming language. It covers several areas of technical computing such as symbolic mathematics, numerical analysis, data processing, visualization, and others. The MapleSim toolkit adds functionality for multi-domain physics simulation and code generation. MATLAB (сокращение от «матричная лаборатория») - это частный многопарадигмальный язык программирования и вычислительная среда, разработанная MathWorks . MATLAB позволяет манипулировать матрицами , строить графики функций и данных, реализовывать алгоритмы , создавать пользовательские интерфейсы и взаимодействовать с программами, написанными на других языках. R - это язык программирования и бесплатная программная среда для статистических вычислений и графики, поддерживаемая R Foundation for Statistical Computing. Язык R широко используется статистиками и специалистами по обработке данных для разработки статистического программного обеспечения и анализа данных .  ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"8dae6e0634a1e0f2fc8a3542de44fd59","permalink":"https://EugeniaVel.github.io/post/yaziki_program/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/yaziki_program/","section":"post","summary":"In a broad sense, a scientific programming language is a programming language that is widely used in computational science and computational mathematics. Such languages ​​are characterized by the presence of libraries in which there are a large number of mathematical functions, as well as specialized syntax.","tags":["Academic"],"title":"Scientific programming languages","type":"post"},{"authors":null,"categories":null,"content":"Цель работы Изучить основы программирования в оболочке ОС UNIX. Научится писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.\nВыполнение лабораторной работы  Создала три файла: a.txt(рис.1) для чтения из него текста, b.txt(рис.2) в качестве шаблона и bb для записи в него результатов работы программы. Создала файл l11n1 и добавила право на исполнение.(рис.3) Написала код для командного файла, который будет анализировать строку с ключами -i,-o,-p,-C,-n, где i - файл для прочтения из него данных, o - файл для вывода данных, p - шаблон для поиска, C - опция для того, чтобы различать большие и малые буквы, n - опция подсчёта строк.(рис.4) Проверила работу файла:   Без опций -C и -n.(рис.5) Без опции -n, но с опцией -C.(рис.6) Со всеми опциями.(рис.7) Без опции -C, но с опцией -n.(рис.8) Без указания шаблона.(рис.9) Без указания файла для прочтения.(рис.10) Без указания файла для записи.(рис.11)                                   Создала файл l11n2 и добавила право на исполнение.(рис.12) Написала программу на C, которая вводит число определяет, является ли оно больше нуля, меньше или равно, и с помощью exit(n) при завершении передаёт информацию о коде завершения в оболочку.(рис.13) Скомпилировала программу с помощью gcc.(рис.14) Написала командный файл, который вызывает созданный на C файл, с помощью $? анализирует код завершения предыдущей программы и выводит информацию о том, какое число было введено.(рис.15) Проверила работу программы на трёх числах, одно из которых меньше нуля, другое - больше и третье равно нулю.(рис.16)                 Создала файл l11n3 и добавила право на исполнение.(рис.17) Написала командный файл, который создаёт или удаляет указанное число файлов с указанным названием.(рис.18) Проверила работу файла с опцией -m - создание файлов(рис.19), -r - удаление файлов(рис.20) , -t - неправильная опция.(рис.21)                 Создала файл l11n3 и добавила право на исполнение.(рис.22) Написала командный файл, который архивирует все файлы в указанной папке.(рис.23) Проверила работу программы на каталоге n4.(рис.24-25) Модифицировала файл так, чтобы он архивировал только те файлы, которые были изменены в течение последних семи дней.(рис.26) Проверила работу файла на каталоге blog.(рис.27-28)                       ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"314ad3c97f4d5b004a2e4cab37cdbf59","permalink":"https://EugeniaVel.github.io/project/lab11/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab11/","section":"project","summary":"Изучаем основы программирования в оболочке ОС UNIX. Учимся писать более сложные командные файлы с использованием логических управляющих конструкций и циклов.","tags":null,"title":"Лабораторная работа №11","type":"project"},{"authors":null,"categories":null,"content":"Цель работы Приобретение практических навыков взаимодействия пользователя с системой посредством командной строки.\nВыполнение лабораторной работы  С помощью команды cd перешла в домашний каталог. С помощью команды pwd узнала полное имя каталога, в котором нахожусь.     2.1. С помощью команды cd перешла в каталог /tmp.\n   2.2 С помощью команды ls без опций вывела на экран содержимое каталога /tmp. Опция -a позволяет посмотреть абсолютно всё содержимое каталога, даже скрытые файлы. Опция -l позволяет вывести на экран подробную информацию о файлах и каталогах. Опция -F выводит на экран указатель того, как запускается файл или каталог. Соответственно, при использовании всех трёх опций сразу можно увидеть все каталоги и файлы с подробной информацией о них и укзанным типом файла.\n         2.3 С помощью команды cd перешла в каталог /var/spool, посмотрела его содержимое с помощью ls и среди каталогов не нашла подкаталог cron.\n   2.4 С помощью команды cd перешла в домашний каталог, с помощью команды ls без опций посмотрела содержимое домашнего каталога и с помощью опции -l посмотрела, кто является владельцем файлов и подкаталогов(evvelikodneva)\n   3.1. С помощью команды mkdir создала в домашнем каталоге подкаталог newdir.\n   3.2. Перешла в каталог newdir и в нём с помощью команды mkdir создала подкаталог morefun.\n   3.3. С помощью команды cd ~ перешла в домашний каталог. В нём с помощью команды mkdir создала сразу три каталога letters, memos и misk. Проверила их создание с помощью команды ls. Затем с помощью команды rm -r удалила сразу три каталога (letters, memos и misk) и проверила их удаление с помощью команды ls.\n   3.4. Попробовала удалить каталог newdir с помощью команды rmdir, однако сделать это не удалось, так как каталог не был пустым.\n   3.5. Удалила каталог ~/newdir/morefun, проверила его удаление с помощью команды ls. Каталог morefun был успешно удалён из каталога newdir.\n   С помощью команды man ls посмотрела список опций и их описание, затем нашла опцию -R, которая выводит содержимое не только указанного каталога, но и его подкаталогов. Проверила, как эта опция работает.        С помощью команды man ls посмотрела список опций и их описание, затем нашла опцию -t, которая сортирует выводимый список по времени последнего изменения, и опцию -l, которая выводит развёрнутое описание файлов. (рис.15-16) Проверила, как эти опции работают.           Использовала команду man для просмотра списка опций следующих команд:  cd\n-P - позволяет следовать по символическим ссылкам перед тем, как будут обработаны все переходы “..”;\n-L - переходит по символическим ссылкам только после того, как были обработаны “..”;\n-e - если папку, в которую нужно перейти не удалось найти - выдает ошибку.\npwd\n-L, –logical - брать директорию из переменной окружения, даже если она содержит символические ссылки;\n-P - отбрасывать все символические ссылки\nmkdir\n-m (–mode=режим) - назначить режим доступа (права). По умолчанию mod принимает значение 0777, что обеспечивает неограниченные права.\n-p (–parents) - не показывать ошибки, а также их игнорировать.\n-z (–context=CTX ) принимает контекст SELinux для каталога по умолчанию.\n-v (–verbose) - выводить сообщение о каждом новым каталоге.\nrmdir\n-p\tПозволяет удалить каталог и вышележащие каталоги, оказавшиеся пустыми. На стандартный вывод выдается сообщение об удалении всех указанных в маршруте каталогов или о сохранении части из них по каким-либо причинам.\n-s\tПодавление сообщения, выдаваемого при действии опции -p.\nrm\n-f\tКоманда не выдает сообщений, когда удаляемый файл не существует, не запрашивает подтверждения при удалении файлов, на запись в которые нет прав. Если нет права и на запись в каталог, файлы не удаляются. Сообщение об ошибке выдается лишь при попытке удалить каталог, на запись в который нет прав (см. опцию -r).\n-r\tПроисходит рекурсивное удаление всех каталогов и подкаталогов, перечисленных в списке аргументов. Сначала каталоги опустошаются, затем удаляются. Подтверждение при удалении файлов, на запись в которые нет прав, не запрашивается, если задана опция -f или стандартный ввод не назначен на терминал и не задана опция -i. При удалении непустых каталогов команда rm -r предпочтительнее команды rmdir, так как последняя способна удалить только пустой каталог. Но команда rm -r может доставить немало острых впечатлений при ошибочном указании каталога!\n-i\tПеред удалением каждого файла запрашивается подтверждение. Опция -i устраняет действие опции -f; она действует даже тогда, когда стандартный ввод не назначен на терминал.\n               С помощью команды history посмотрела историю выполнения команд. Выполнила следующие команды с изменениями:  mkdir(добавила -v(опция, которая выводит описание проделанных команд))\nrm -r(добавила -v)\nrmdir(добавила -p(опция, которая позволяет удалять каталоги с их содержимым) и -v)\n   ","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"9dda109f1ed2d3ee847a569747ca67b6","permalink":"https://EugeniaVel.github.io/project/lab4/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab4/","section":"project","summary":"Приобретение практических навыков взаимодействия пользователя с системой посредством командной строки.","tags":["Deep Learning"],"title":"Лабораторная работа №4","type":"project"},{"authors":null,"categories":null,"content":"Выполнение лабораторной работы  С помощью команды login зашла в систему, используя соответствующее имя пользователя.     С помощью команд ls и grep и их опций, а также потока вывода (\u0026gt;,») записала в файл file.txt названия файлов, содержащихся в каталоге /etc и затем дописала в этот же файл названия файлов,содержащихся в домашнем каталоге.     Используя команд cat и grep, сначала вывела на экран имена всех файлов из file.txt, имеющих расширение .conf, а затем с помощью потока вывода записала их в новый текстовый файл с именем conf.txt.        С помощью команды find и её опций нашла все файлы, начинающиеся с символа c, которые содержатся в домашнем каталоге.     С помощью команд find, less, их опций и конвейера постранично вывела на экран имена файлов из каталога /etc,начинающихся с символа h.(рис.6-7)        Используя команду find, потоковый вывод и \u0026amp;, запустила в фоновом режиме процесс, который записывает в файл ~/logfile файлы,имена которых начинаются с log.     С помощью команды rm удалила файл ~/logfile.     С помощью знака \u0026amp; запустила из консоли в фоновом режиме редактор gedit.     Используя команду ps aux, фильтр grep и конвейер, определила идентификатор процесса gedit. Кроме того, идентификатор процесса указан при его запуске в фоновом режиме.     Прочитала справку (man) команды kill. Использовала команду kill % с PID для завершения процесса gedit.        Команда df показывает размер каждого смонтированного раздела диска. Команда du показывает число килобайт,используемое каждым файлом или каталогом.           С помощью команды find и её опций maxdepth и type вывела имена всех директорий,имею- щихся в домашнем каталоге.           Выводы Ознакомилась с инструментами поиска файлов и фильтрации текстовых данных. Приобрела практические навыки: по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"7cbb474e0030faff67e24c684a37421e","permalink":"https://EugeniaVel.github.io/project/lab6/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab6/","section":"project","summary":"Ознакомление с инструментами поиска файлов и фильтрации текстовых данных. Приобретение практических навыков по управлению процессами (и заданиями), по проверке использования диска и обслуживанию файловых систем.","tags":["Deep Learning"],"title":"Лабораторная работа №6","type":"project"},{"authors":null,"categories":null,"content":"Цель работы Познакомиться с операционной системой Linux. Получить практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.\nВыполнение лабораторной работы Задание 1  С помощью команды mkdir создала каталог ~/work/os/lab06.(рис.1)     С помощью команды cd перешла в созданный в первом пункте каталог.(рис.2)     Вызвала vi и создала новый файл hello.sh.(рис.3-4)        Нажала клавишу i, чтобы перейти в режим ввода(INSERT) и ввела предложенный в задании текст.(рис.5)     Нажала клавишу esc для перехода в командный режим. Внизу теперь нет слова INSERT.(рис.6)     Нажала двоеточие для перехода в режим последней строки. Внизу появилось приглашение в виде двоеточия.(рис.7)     Ввела wq для сохранения файла и завершения работы.(рис.8)     С помощью команды chmod сделала файл исполняемым(добавила право на исполнение файла).(рис.9)     Задание 2  Вызвала vi для редактирования файла hello.sh.(рис.10)     Установила курсор в конце слова HELL во второй строке.(рис.11)     Нажав на клавишу i, перешла в режим вставки и заменила слово HELL на HELLO. Нажала клавишу esc для перехода в командный режим.(рис.12)     Установила курсор на 4 строку(рис.13) Нажав на клавиши dw, удалила слово LOCAL.(рис.14)        Нажав на букву i, перешла в режим вставки и набрала слово local.(рис.15) Нажала клавишу esc для перехода в командный режим.     Установила курсор на последней строке.(рис.16) После неё вставила строчку “echo $HELLO”.(рис.17)         Нажала клавишу esc для перехода в командный режим.\n  Нажав на клавишу d дважды, удалила последнюю строку.(рис.18)\n     Нажала на клавишу u для отмены изменений.(рис.19)     Ввела символ : для перехода в режим последней строки, затем ввела w для сохранения изменений и q для выхода из vi.  Выводы Познакомилась с операционной системой Linux. Получила практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"000e20314bc20bef635ff513cb37579e","permalink":"https://EugeniaVel.github.io/project/lab8/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/lab8/","section":"project","summary":"Познакомиться с операционной системой Linux. Получить практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.","tags":null,"title":"Лабораторная работа №8","type":"project"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"So, the structure of the report on laboratory work on Operating Systems includes:\n title page formulation of the purpose of the work description of results conclusions answers to security questions Let’s consider some points in more detail. The information on the title page should include: indication of the number of laboratory work Name of the student who completed the laboratory work This page is drawn up using a template, so at this stage it is difficult to make a mistake, the main thing is not to forget about this item (as well as about others), so you should always keep the structure of the report in front of your eyes when designing it. The next item is statement of the purpose of the work. Usually the purpose of the work is present in the description of the tasks, so this item is also quite simple to complete. Description of the results - the main part of the work, here you need to describe in detail your actions when performing the laboratory. Components of this section: screenshots of the laboratory work. When doing work, I personally try to make sure that there are a lot of screenshots (so that they explain the work process). I also make sure that they are of good quality and that they do not contain any unnecessary information. listings (source code of programs), if any. So far, we haven’t had any labs with source code, we’ve done tasks on the command line or in built-in editors. results of program execution (text or screenshot depending on the task). In addition to these points, it is necessary to describe the performance of the work in the form of text, to tell in sufficient detail about which commands were used and what result they gave. The section conclusions is intended for the student to tell what he learned during the laboratory work. Usually the conclusions coincide with the purpose of the work. In the section answers to control questions the student answers the questions contained at the end of the description of the laboratory work. They are needed in order to repeat the material covered, to recall the theoretical foundations. We prepare lab reports using Markdown. It is a handy tool with clear syntax. At the beginning of the file, the fonts and design theme used in the file are indicated, then the entire text of the report is written, which, thanks to the use of Markdown, can be very easily converted into any convenient format, I convert OS reports to pdf and docx files. That’s all, I hope there are no questions about the design of the reports!  ","date":1653004800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653004800,"objectID":"688f5d96aa336d6e14ba5e0735a03403","permalink":"https://EugeniaVel.github.io/post/report-post/","publishdate":"2022-05-20T00:00:00Z","relpermalink":"/post/report-post/","section":"post","summary":"When performing laboratory work on the OS, one of the tasks is to prepare a report on laboratory work. In this post I will talk about the structure of the report, the means for its design.","tags":["Academic"],"title":"Report design","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Last week we completed two laboratory works - №7,8, and also made out the third stage of an individual project. Now I will tell you what I learned and what work was done. In Lab 7 we learned how to work with the Midnight Commander shell. The command shell is an interface for user interaction with the operating system and software through commands. Midnight Commander (or mc) is a pseudo-graphical command shell for UNIX/Linux systems. We looked at the commands of each panel in mc, found out why they are needed, and also learned how to use hotkeys.\nIn addition, we worked with the built-in editor in mc, which can be launched using the mc -e or mcedit command, specifying the name of the file to be edited after it. In lab #8 we worked with vi (Visual display editor). It can be used to edit text files. We worked in all three vi modes - command mode, insert mode, and last line mode.\nDuring the third stage of an individual project, we added information about achievements, skills and experience to the site, as well as two posts: one for the past week, the second on a topic of your choice:\n Lightweight markup languages. Markup languages. LaTeX. Markdown language. I chose the Markdown markup language, described the main features of its syntax.  ","date":1653004800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653004800,"objectID":"3afe2413fff63983c16ed3ef1ccffaef","permalink":"https://EugeniaVel.github.io/post/9.05-15.05/","publishdate":"2022-05-20T00:00:00Z","relpermalink":"/post/9.05-15.05/","section":"post","summary":"Last week we completed two laboratory works - №7,8, and also made out the third stage of an individual project. Now I will tell you what I learned and what work was done.","tags":["Academic"],"title":"Пост по прошлой неделе(9.05.22-15.05.22)","type":"post"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Laboratory work №5  I studied Linux file systems, their structures, names and content of their directories. I learned how to use commands for working with files and directories, how to manage processes and how to check disk usage.  Report about laboratory work №5 I created the lab5 directory, copied the report and presentation templates into it. (Fig. 1)     { #fig:001 width=70% }\n In the first part of the description of the laboratory work, the following commands were given:  1.1. touch - creates a new file. I created a lab5.txt file, wrote numbers from 1 to 40 into it, so that when the following commands are executed, they are displayed on the screen. (Fig. 2, 3)\n1.2. cat - allows you to view small files. I displayed the contents of the file created by the previous command. (Fig. 2)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n1.3. less - used to view files page by page. I looked at the contents of the file I created in the first paragraph. (Fig.5,6)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n1.4. head - displays the first 10 lines of the file on the screen by default, using the -n option, you can set the number of output lines. Displayed the first 15 lines of the file lab5.txt. (Fig. 6)\n   { #fig:001 width=70% }\n1.5. tail - Prints the last 10 lines of a file by default. The -n option can be used to set the number of lines to be output. Displayed the last 15 lines of the lab5.txt file. (Fig. 7)\n   { #fig:001 width=70% }\n     { #fig:001 width=70% }\n2.2. Using the mkdir command, I created the ~/ski.plases directory in my home directory. I checked its creation using the ls command (displaying the contents of the directory) (Fig. 9)\n![9.Create the ~/ski.plases directory, check if it is in it] (image/oc9.jpg){ #fig:001 width=70% }\n2.3. Using the mv command, I moved the equipment file to the ~/ski.plases directory. I checked the location of the file in the ~/ski.plases directory.(Fig. 10)\n   { #fig:001 width=70% }\n2.4. Renamed the ~/ski.plases/equipment file to ~/ski.plases/equiplist using the cp command. I checked the change of his name. (Fig. 11)\n   { #fig:001 width=70% }\n2.5. Using the touch command, I created the file abc1 in my home directory. Using the cp command, I copied it to the ~/ski.plases directory, giving the new name equiplist2. I checked each action with the ls command. (Fig. 12)\n   { #fig:001 width=70% }\n2.6. Created a directory called equipment in the ~/ski.plases directory using the mkdir command. Checking its location in the catalog. (Fig. 13)\n   { #fig:001 width=70% }\n2.7. Using the mv command, I moved the files ~/ski.plases/equiplist and equiplist2 to the directory ~/ski.places/equipment. I checked their absence in the ~/ski.plases directory and their presence in the ~/ski.plases/equipment directory. (Fig. 14)\n   { #fig:001 width=70% }\n2.8. Created a directory called ~/newdir with the mkdir command and moved it to the ~/ski.plases directory with the new name plans using the cp command. I checked the execution of both commands. (Fig. 15)\n   { #fig:001 width=70% }\n     { #fig:001 width=70% }\n   { #fig:001 width=70% }\n3.2. Created a new directory called play. Using the chmod command and the octal notation gave the directory the following rights: drwx–x–x(711) (Fig.18). I checked the addition of these rights using the ls -l command. (Fig. 19)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n3.3. Created a new file named my_os. With the help of the chmod command, using the octal notation, I transferred the following rights to the file: -r-xr–r–(544) (Fig. 20). I checked the addition of these rights using the ls -l command. (Fig. 21)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n3.4. Created a new file called feathers. With the help of the chmod command, using the octal notation, I transferred the following rights to the file: -rw-rw-r–(644) (Fig. 22). I checked the addition of these rights using the ls -l command. (Fig. 23)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n  4.1. Using the cat command, I looked at the contents of the /etc/passwd file. (Fig. 24-25)\n   { #fig:001 width=70% }\n   { #fig:001 width=70% }\n4.2. Using the cp command, I copied the ~/feathers file to the ~/file.old file. (Fig. 26)\n   { #fig:001 width=70% }\n4.3. Using the mv command, I moved the ~/file.old file to the ~/play directory. (Fig. 27)\n   { #fig:001 width=70% }\n4.4. Using the cp command, I copied the ~/play directory to the ~/fun directory. The -r option means a recursive copy, i.e. a complete copy of a directory. I checked the appearance of a new directory with the ls command. (Fig. 28)\n   { #fig:001 width=70% }\n4.5. Using the mv command, I moved the ~/fun directory to the ~/play directory and immediately gave it the new name games. I checked its absence in the home directory and its presence in the ~/play directory with the ls command. (Fig. 29)\n   { #fig:001 width=70% }\n4.6. Using the command chmod u-r(u - owner, - - take away rights, r - read) deprived the owner of the ~/feathers …","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589414400,"objectID":"fc74cff2d25450d3513cde477c69a2df","permalink":"https://EugeniaVel.github.io/post/last-week-post/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/post/last-week-post/","section":"post","summary":"During the last week I've done 2 laboratory works. I am going to show you, what I have done.","tags":["Academic"],"title":"Last week post 👋","type":"post"},{"authors":null,"categories":null,"content":"Теоретическое введение Midnight Commander (или mc) — псевдографическая командная оболочка для UNIX/Linux систем.\nНад панелями располагается меню, доступ к которому осуществляется с помощью клавиши F9 . Под панелями внизу расположены управляющие экранные кнопки, ассоци- ированные с функциональными клавишами F1 – F10. Над ними располагается командная строка, предназначенная для ввода команд.\nПанель в mc отображает список файлов текущего каталога. Абсолютный путь к этому каталогу отображается в заголовке панели. У активной панели заголовок и одна из её строк подсвечиваются. Управление панелями осуществляется с помощью определённых комбинаций клавиш или пунктов меню mc.\nПерейти в строку меню панелей mc можно с помощью функциональной клавиши F9 . В строке меню имеются пять меню: Левая панель , Файл , Команда , Настройки и Правая панель.\nВыполнение лабораторной работы  Изучила информацию о Midnight Commander, вызвав man mc в командной строке.     Запустила из командной строки mc, изучила его структуру и меню.       б)С помощью комбинации клавиш shift и стрелок вверх-вниз выделила каталог ~/work/study в правой панели, затем с помощью той же комбинации отменила выделение каталога.\nв)С помощью клавиши f5 скопировала файл Student.cpp из каталога ~/work/study/2021-2022/Операционные системы в каталог ~/work.\nг)С помощью клавиши f6 переместила файл Student.cpp из каталога ~/work в домашний каталог.\nд)С помощью комбинации клавиш shift и space посмотрела размер домашнего каталога.\nВыполнила команды:  а)Быстрый просмотр. С её помощью вывела на левую панель содержание файла Student.cpp из домашнего каталога.\n   б)Информация. С её помощью вывела на экран информацию об одном из снимков экрана.\nв)Дерево каталогов. С её помощью посмотрела содержание домашнего каталога в виде дерева каталогов.\n   г)Формат списка. С её помощью я изменила формат выводимого списка файлов и каталогов на укороченный.\n   д)Порядок сортировки. С её помощью изменила порядок сортировки файлов и каталогов в домашнем каталоге.\n   е)Фильтр. С её помощью вывела на экран файлы из домашнего каталога только с расширением .cpp.\n   Используя возможности подменю файл, выполнила следующие операции:  -Посмотрела содержимое файла Student.cpp c помощью команды просмотр файла.\n   -Отредактировала файл Student.cpp с помощью команды правка, не сохранив изменения.\n   -С помощью команды создание каталога создала каталог ~/lab7.\n   -С помощью команды копирование скопировала два выделенных мной снимка экрана в созданный мной в прошлом пункте каталог ~/lab7.\n   Используя возможности подменю команда, выполнила следующие операции:  -С помощью команды поиск файла в домашнем каталоге рекурсивно нашла все файлы с расширением .txt.\n-С помощью команды история, посмотрела историю команд, однако не получила вывод ни одной команды, поэтому не смогла выполнить задание до конца.\n-С помощью команды каталоги быстрого доступа, куда я предварительно добавила домашний каталог, переместилась в него.\n   -С помощью команды редактировать файл меню посмотрела содержимое файла меню. Команда позволяет отредактировать контекстное меню пользователя, вызываемое по клавише F2. С помощью команды редактировать файл расширений посмотрела содержимое файла расширений. Команда позволяет позволяет задать с помощью определённого синтаксиса действия при запуске файлов с определённым расширением.\n      Вызвала подменю настройки. В настройках панели нашла команду показывать скрытые файлы. и другие команды, определяющие структуру экрана mc.(Например, изменение темы mc)     Задание по встроенному редактору mc   С помощью команды touch создала файл text.txt в домашнем каталоге.\n  Открыла файл в редакторе с помощью команды mc -e(можно также использовать команду mcedit).\n      Вставила в файл текст шаблона по лабораторной работе.\n   4.1. С помощью комбинации клавиш ctrl-y удалила первую строку в тексте файла.\n4.2. С помощью клавиши f3 выделила фрагмент текста файла (один абзац) и с помощью клавиши f5 скопировала его на первую строку.\n4.3. С помощью клавиши f3 выделила фрагмент текста файла (один абзац) и с помощью клавиши f6 переместила его на следующей строке после второго абзаца.\n4.4. С помощью клавиши f2 сохранила изменения в файле.\n4.5. С помощью комбинации клавиш ctrl-u отменила перемещение абзаца, сделанное в подпункте 4.3.\n4.6. С помощью комбинации клавиш ctrl-end перешла в конец файла и ввела своё ФИО.\n4.7. С помощью комбинации клавиш ctrl-home перешла в начало файла и ввела название своей группы.\n4.8. Сохранила файл с помощью клавиши f2 и закрыла файл с помощью клавиши f10.\n Открыла файл Student.cpp на языке С++.\n  Используя меню редактора(подменю команда), выключила подсветку синтаксиса, так как она изначально была включена.\n        ","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486400,"objectID":"e5ca20668dd84965c4c59a1e1ee772cb","permalink":"https://EugeniaVel.github.io/project/lab7/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/project/lab7/","section":"project","summary":"Освоение основных возможностей командной оболочки Midnight Commander. Приобретение навыков практической работы по просмотру каталогов и файлов; манипуляций с ними.","tags":null,"title":"Лабораторная работа №7","type":"project"},{"authors":["Eugenia Velikodneva"],"categories":null,"content":"Markdown is a lightweight markup language designed to mark formatting in plain text while maintaining human readability as much as possible, and suitable for machine conversion into advanced publishing languages ​​(HTML, Rich Text, and others).\nBasic aspects of the syntax:\n  Paragraphs are created using an empty line. If there are empty lines around the text above and below, then the text turns into a paragraph. To make a line break instead of a paragraph, you need to put two spaces at the end of the previous line.\n  Headings are marked with a sharp # at the beginning of the line, from one to six.\n  To mark up unordered lists, you can use either *, or -, or + Nested items are created by four spaces before the item marker:\n   element 1 element 2  nested element 2.1 nested element 2.2   element …   Pictures are inserted using the following scheme “   ”, where you can add a caption to the picture in square brackets  ","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"3ddcbf31bd0daec9e0bdd991331c04df","permalink":"https://EugeniaVel.github.io/post/markdown-post/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/markdown-post/","section":"post","summary":"We will understand what it is and why it is needed, and also see the main aspects of its syntax.","tags":["Academic"],"title":"Markdown","type":"post"},{"authors":["Eugenia Velikodneva","吳恩達"],"categories":["Demo","教程"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It’s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  👉 Create a new site 📚 Personalize your site 💬 Chat with the Wowchemy community or Hugo community 🐦 Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy 💡 Request a feature or report a bug for Wowchemy ⬆️ Updating Wowchemy? View the Update Tutorial and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n❤️ Click here to become a sponsor and help support Wowchemy’s future ❤️ As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features 🦄✨\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you’ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://EugeniaVel.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","开源"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://EugeniaVel.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://EugeniaVel.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":["Eugenia Velikodneva","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://EugeniaVel.github.io/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]